anyNA(train[, ..predictor_columns])
anyNA(train[[target_column]])
# Vérifier dans l'ensemble de test
anyNA(test[, ..predictor_columns])
anyNA(test[[target_column]])
# Exemple de conversion des variables en numérique
train[, (predictor_columns) := lapply(.SD, as.numeric), .SDcols = predictor_columns]
View(test)
# Vérifier les valeurs manquantes dans les variables explicatives et la cible
anyNA(train[, ..predictor_columns])
anyNA(train[[target_column]])
# Vérifier dans l'ensemble de test
anyNA(test[, ..predictor_columns])
anyNA(test[[target_column]])
# Exemple de conversion des variables en numérique
train[, (predictor_columns) := lapply(.SD, as.numeric), .SDcols = predictor_columns]
View(test)
View(train)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet.xlsx")
df <- as.data.table(data)
df <- df[complete.cases(df), ]
df <- df[1:100, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
# Split dataset (Train/Test)
df_split <- initial_split(df_filtered, prop = 0.8)
train <- training(df_split)
test <- testing(df_split)
View(test)
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet.xlsx")
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet.xlsx")
df <- as.data.table(data)
df <- df[complete.cases(df), ]
df <- df[1:100, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet.xlsx")
df <- as.data.table(data)
df <- df[complete.cases(df), ]
df <- df[1:100, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
View(df_filtered)
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet.xlsx")
# Charger les données
data <- read_excel("dataset_complet.xlsx")
df <- as.data.table(data)
df <- df[complete.cases(df), ]
df <- df[1:100, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
View(df_filtered)
# Afficher les valeurs uniques pour chaque colonne dans columns_of_interest
unique_values <- lapply(columns_of_interest, function(col) unique(train[[col]]))
# Afficher les valeurs uniques pour chaque colonne dans columns_of_interest
unique_values <- lapply(columns_of_interest, function(col) unique(df[[col]]))
# Afficher les valeurs uniques pour chaque colonne dans columns_of_interest
unique_values <- lapply(columns_of_interest, function(col) unique(df_filtered[[col]]))
# Afficher les résultats
names(unique_values) <- columns_of_interest
unique_values
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet.xlsx")
df <- as.data.table(data)
df <- df[complete.cases(df), ]
df <- df[1:1000, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
# Afficher les valeurs uniques pour chaque colonne dans columns_of_interest
unique_values <- lapply(columns_of_interest, function(col) unique(df_filtered[[col]]))
# Afficher les résultats
names(unique_values) <- columns_of_interest
unique_values
# Remplacer les valeurs manquantes (NA) par 0 dans toutes les colonnes de columns_of_interest
train[, (columns_of_interest) := lapply(.SD, function(x) replace(x, is.na(x), 0)), .SDcols = columns_of_interest]
# Remplacer les valeurs manquantes (NA) par 0 dans toutes les colonnes de columns_of_interest
df_filtered[, (columns_of_interest) := lapply(.SD, function(x) replace(x, is.na(x), 0)), .SDcols = columns_of_interest]
# Remplacer les valeurs manquantes (NA) par 0 dans toutes les colonnes de columns_of_interest
df_filtered[, (columns_of_interest) := lapply(.SD, function(x) replace(x, is.na(x), 0)), .SDcols = columns_of_interest]
# Vérifier que les valeurs manquantes ont été remplacées
sapply(df_filtered[, ..columns_of_interest], function(x) sum(is.na(x)))  # Compter les valeurs NA restantes
# Remplacer les valeurs manquantes (NA) par 0 dans toutes les colonnes de columns_of_interest
df_filtered[, (columns_of_interest) := lapply(.SD, function(x) replace(x, is.na(x), 0)), .SDcols = columns_of_interest]
# Vérifier que les valeurs manquantes ont été remplacées
sapply(df_filtered[, ..columns_of_interest], function(x) sum(is.na(x)))  # Compter les valeurs NA restantes
View(df_filtered)
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet1.xlsx")
df <- as.data.table(data)
df <- df[complete.cases(df), ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'ao2a', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
# Split dataset (Train/Test)
df_split <- initial_split(df_filtered, prop = 0.8)
# Charger les données
data <- read_excel("dataset_complet1.xlsx")
df <- as.data.table(data)
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'ao2a', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
# Split dataset (Train/Test)
df_split <- initial_split(df_filtered, prop = 0.8)
train <- training(df_split)
test <- testing(df_split)
# Liste des variables cibles
target_columns <- c('sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6')
# Liste des variables explicatives
predictor_columns <- c('vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a',
'vf4b', 'secu_scol', 'absence_scol', 'violence_scol', 'al4_1', 'al4_3',
'heure_sport_extra', 'sport_amusement', 'sport_sante', 'tb1', 'tb2',
'ao1', 'ao2a', 'cn1', 'sd1')
# Fonction d'entraînement du modèle
train_reg_model <- function(target_column) {
# Convertir la variable cible en facteur
train[[target_column]] <- as.factor(train[[target_column]])
# Créer la formule du modèle
formula <- as.formula(paste(target_column, "~", paste(predictor_columns, collapse = " + ")))
# Créer le modèle de régression logistique multinomiale
log_reg <- multinom_reg() %>%
set_engine("nnet") %>%
set_mode("classification")
# Créer le workflow
log_reg_wf <- workflow() %>%
add_model(log_reg) %>%
add_formula(formula)
# Entraîner le modèle
trained_log_reg <- fit(log_reg_wf, data = train)
return(trained_log_reg)
}
# Fonction de test du modèle et calcul des métriques
test_model <- function(trained_log_reg, target_column) {
# Prédictions sur l'ensemble de test
log_reg_preds <- predict(trained_log_reg, new_data = test)$.pred_class
# Convertir la variable cible en facteur et récupérer les prédictions
test[[target_column]] <- factor(test[[target_column]], levels = levels(log_reg_preds))
# Calculer les métriques de performance
metrics <- metric_set(accuracy, precision, recall, f_meas)
# Créer un data frame avec les véritables valeurs et les prédictions
results_df <- tibble(
truth = test[[target_column]],
estimate = log_reg_preds
)
# Calculer les métriques
log_reg_metrics <- metrics(results_df, truth = truth, estimate = estimate)
return(log_reg_metrics)
}
test_model_on_colums <- function(target_columns){
# Appliquer les fonctions à toutes les variables cibles
results <- list()
for (target_column in target_columns) {
# Entraîner le modèle pour chaque variable cible
trained_log_reg <- train_reg_model(target_column)
# Tester le modèle et récupérer les métriques
metrics <- test_model(trained_log_reg, target_column)
# Ajouter les résultats au tableau
results[[target_column]] <- metrics
}
# Afficher les résultats
return (results)
}
results <- test_model_on_colums( target_columns)
results
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet.xlsx")
df <- as.data.table(data)
#df <- df[complete.cases(df), ]
df <- df[1:100, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
# Split dataset (Train/Test)
df_split <- initial_split(df_filtered, prop = 0.8)
train <- training(df_split)
test <- testing(df_split)
# Liste des variables cibles
target_column <- 'sm1'
# Liste des variables explicatives
predictor_columns <- c('vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a',
'vf4b', 'secu_scol', 'absence_scol', 'violence_scol', 'al4_1', 'al4_3',
'heure_sport_extra', 'sport_amusement', 'sport_sante', 'tb1', 'tb2',
'ao1', 'cn1', 'sd1')
# Vérifier les niveaux de la variable cible dans train et test
levels(train[[target_column]])
levels(test[[target_column]])
# S'assurer que les niveaux de test et d'entraînement sont les mêmes
test[[target_column]] <- factor(test[[target_column]], levels = levels(train[[target_column]]))
# Vérifier les valeurs manquantes dans les variables explicatives et la cible
anyNA(train[, ..predictor_columns])
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet1.xlsx")
df <- as.data.table(data)
df <- df[complete.cases(df), ]
df <- df[1:1000, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
# Afficher les valeurs uniques pour chaque colonne dans columns_of_interest
unique_values <- lapply(columns_of_interest, function(col) unique(df_filtered[[col]]))
# Afficher les résultats
names(unique_values) <- columns_of_interest
unique_values
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet1.xlsx")
df <- as.data.table(data)
df <- df[complete.cases(df), ]
df <- df[1:1000, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Afficher les valeurs uniques pour chaque colonne dans columns_of_interest
unique_values <- lapply(columns_of_interest, function(col) unique(df_filtered[[col]]))
# Afficher les résultats
names(unique_values) <- columns_of_interest
unique_values
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet1.xlsx")
df <- as.data.table(data)
df <- df[1:1000, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
# Afficher les valeurs uniques pour chaque colonne dans columns_of_interest
unique_values <- lapply(columns_of_interest, function(col) unique(df_filtered[[col]]))
# Afficher les résultats
names(unique_values) <- columns_of_interest
unique_values
# Remplacer les valeurs manquantes (NA) par 0 dans toutes les colonnes de columns_of_interest
df_filtered[, (columns_of_interest) := lapply(.SD, function(x) replace(x, is.na(x), 0)), .SDcols = columns_of_interest]
# Vérifier que les valeurs manquantes ont été remplacées
sapply(df_filtered[, ..columns_of_interest], function(x) sum(is.na(x)))  # Compter les valeurs NA restantes
View(df_filtered)
write.xlsx(df_filtered, "dataset_complet2_processed.xlsx")
# Vérifier que les valeurs manquantes ont été remplacées
sapply(df_filtered[, ..columns_of_interest], function(x) sum(is.na(x)))  # Compter les valeurs NA restantes
write.xlsx(df_filtered, "dataset_complet2_processed.xlsx")
# Vérifier que les valeurs manquantes ont été remplacées
sapply(df_filtered[, ..columns_of_interest], function(x) sum(is.na(x)))  # Compter les valeurs NA restantes
write.xlsx(df_filtered, "dataset_complet2_processed.xlsx")
install.packages("openxlsx")
library(openxlsx)
write.xlsx(df_filtered, "dataset_complet2_processed.xlsx")
install.packages("openxlsx")
install.packages("writexl")
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet1.xlsx")
df <- as.data.table(data)
df <- df[1:1000, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
```
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet1.xlsx")
df <- as.data.table(data)
df <- df[1:1000, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
```
unique_values
# Remplacer les valeurs manquantes (NA) par 0 dans toutes les colonnes de columns_of_interest
df_filtered[, (columns_of_interest) := lapply(.SD, function(x) replace(x, is.na(x), 0)), .SDcols = columns_of_interest]
# Vérifier que les valeurs manquantes ont été remplacées
sapply(df_filtered[, ..columns_of_interest], function(x) sum(is.na(x)))  # Compter les valeurs NA restantes
library(openxlsx)
write.xlsx(df_filtered, "dataset_complet2_processed.xlsx")
write.xlsx(df_filtered, "dataset_complet2_processed.xlsx")
write.xlsx(df_filtered, "dataset_complet2_processed.csv")
write(df_filtered, "dataset_complet2_processed.xlsx")
install.packages("writexl")
write.xlsx(df_filtered, "dataset_complet2_processed.xlsx")
write.xlx(df_filtered, "dataset_complet2_processed.xlsx")
write.xls(df_filtered, "dataset_complet2_processed.xlsx")
xlsx
write.xlsx(df_filtered, "dataset_complet2_processed.xlsx")
library(writexl)
write.xlsx(df_filtered, "dataset_complet2_processed.xlsx")
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet1.xlsx")
df <- as.data.table(data)
df <- df[1:1000, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
```
# Remplacer les valeurs manquantes (NA) par 0 dans toutes les colonnes de columns_of_interest
df_filtered[, (columns_of_interest) := lapply(.SD, function(x) replace(x, is.na(x), 0)), .SDcols = columns_of_interest]
library(writexl)
write.xlsx(df_filtered, "dataset_complet2_processed.xlsx")
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet1.xlsx")
df <- as.data.table(data)
df <- df[1:1000, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
## Voir les valuers dans chacune des colonnes
```{r}
write.xlsx(df_filtered, "dataset_complet2.xlsx")
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet1.xlsx")
df <- as.data.table(data)
df <- df[1:1000, ]
# Liste des variables d'intérêt
columns_of_interest <- c(
'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6',
'vf2_1', 'vf2_2', 'vf2_3', 'vf2_4', 'vf2_5', 'vf2_6', 'vf2_7', 'vf4a', 'vf4b',
'secu_scol', 'absence_scol', 'violence_scol',
'al4_1', 'al4_3', 'heure_sport_extra', 'sport_amusement', 'sport_sante',
'tb1', 'tb2', 'ao1', 'cn1', 'sd1'
)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
# Afficher les valeurs uniques pour chaque colonne dans columns_of_interest
unique_values <- lapply(columns_of_interest, function(col) unique(df_filtered[[col]]))
# Afficher les résultats
names(unique_values) <- columns_of_interest
unique_values
# Remplacer les valeurs manquantes (NA) par 0 dans toutes les colonnes de columns_of_interest
df_filtered[, (columns_of_interest) := lapply(.SD, function(x) replace(x, is.na(x), 0)), .SDcols = columns_of_interest]
# Vérifier que les valeurs manquantes ont été remplacées
sapply(df_filtered[, ..columns_of_interest], function(x) sum(is.na(x)))  # Compter les valeurs NA restantes
library(writexl)
write.xlsx(df_filtered, "dataset_complet2.xlsx")
install.packages("writexl")
library(writexl)
install.packages("writexl")
library(writexl)
write.xlsx(df_filtered, "dataset_complet2.xlsx")
install.packages("openxlsx")
library(openxlsx)
Sys.setenv(TMPDIR = "C:/Temp") # Créez ce dossier si nécessaire
install.packages("openxlsx")
Sys.setenv(TMPDIR = "C:/Temp")
install.packages("openxlsx")
library(writexl)
write.xlsx(df_filtered, "dataset_complet2.xlsx")
install.packages("writexl")
