mastercard<-read.table("D:/IMTA/Data pour le conseil/Cours/Base/Base/mastercard.txt")#importation de la base de donnC)es #
library(tidyverse)
library(AER)
library(memisc)
library(modelsummary)
library(pROC)
library(ggplot2)
mastercard<-read.table("D:/IMTA/Data pour le conseil/Cours/Base/Base/mastercard.txt")#importation de la base de donnC)es #
attach(mastercard)
view(mastercard)
summary(mastercard)
sd(AGE)
sd(ANCIENNETE)
sd(MOUV_CRED)
sd(AVOIRS)
sd(NB_COMPTES)
sd(SOLDE_CC)
sd(DER_MOUV)
sd(NB_OP)
sd(NBJ_DECOUVERT)
sd(TX_ENDET)
sd(CREDITS)
hist(AGE, col="orange", main ="Age des clients",xlab="", ylab = "")
shapiro.test(AGE)
hist(AGE, col="orange", main ="Age des clients",xlab="", ylab = "")
shapiro.test(AGE)
hist(ANCIENNETE, col= "lightblue", main ="AnciennitC) des clients",xlab="", ylab = "")
shapiro.test(ANCIENNETE)
hist(AGE, col="orange", main ="Age des clients",xlab="", ylab = "")
shapiro.test(AGE)
hist(ANCIENNETE, col= "lightblue", main ="AnciennitC) des clients",xlab="", ylab = "")
shapiro.test(ANCIENNETE)
hist(MOUV_CRED, col= "red", main ="Mouv_credit des clients",xlab="", ylab = "")
shapiro.test(MOUV_CRED)
hist(AVOIRS, col= "green2", main ="Avoirs des clients",xlab="", ylab = "")
shapiro.test(AVOIRS)
hist(SOLDE_CC, col= "yellow", main ="Solde courant des clients",xlab="", ylab = "")
shapiro.test(SOLDE_CC)
hist(DER_MOUV, col= "brown", main ="Age du dernier mouvement",xlab="", ylab = "")
shapiro.test(DER_MOUV)
hist(NB_OP, col= "beige", main ="Nombre db")
########################################################################################################
########################################################################################################
###################################TD1 Analyses uni et bivariC)es+TT des DM##############################
########################################################################################################
########################################################################################################
install.packages("tidyverse") ##visualisation, manipulation des tableaux de donnC)es, import/export de donnC)es, manipulation de variables###
install.packages("AER") ##Estimations de modC(les##
install.packages("memisc")
install.packages("modelsummary")
install.packages("pROC")
install.packages("ggplot2")  # le package des reprC)sentations graphiques#
library(tidyverse)
library(AER)
library(memisc)
library(modelsummary)
library(pROC)
library(ggplot2)
mastercard<-read.table("D:/IMTA/Data pour le conseil/Cours/Base/Base/mastercard.txt")#importation de la base de donnC)es #
attach(mastercard)
view(mastercard)
dim(mastercard)##dimensions de la base de donnC)es##
colnames(mastercard) ##Nom des variables##
str(mastercard) ##voir la structure de la base de donnC)es##
#######################################################################################################
#######################################################################################################
########################################STATISIQUE UNIVARIE############################################
#######################################################################################################
#######################################################################################################
##########################Variables quantitatives#####################################################
summary(mastercard)
### Calcul des C)carts types (sd)
sd(AGE)
sd(ANCIENNETE)
sd(MOUV_CRED)
sd(AVOIRS)
sd(NB_COMPTES)
sd(SOLDE_CC)
sd(DER_MOUV)
sd(NB_OP)
sd(NBJ_DECOUVERT)
sd(TX_ENDET)
sd(CREDITS)
### histogramme distribution des variables quantitatives###
hist(AGE, col="orange", main ="Age des clients",xlab="", ylab = "")
shapiro.test(AGE)
hist(ANCIENNETE, col= "lightblue", main ="AnciennitC) des clients",xlab="", ylab = "")
shapiro.test(ANCIENNETE)
hist(MOUV_CRED, col= "red", main ="Mouv_credit des clients",xlab="", ylab = "")
shapiro.test(MOUV_CRED)
hist(AVOIRS, col= "green2", main ="Avoirs des clients",xlab="", ylab = "")
shapiro.test(AVOIRS)
hist(SOLDE_CC, col= "yellow", main ="Solde courant des clients",xlab="", ylab = "")
shapiro.test(SOLDE_CC)
hist(DER_MOUV, col= "brown", main ="Age du dernier mouvement",xlab="", ylab = "")
shapiro.test(DER_MOUV)
hist(NB_OP, col= "beige", main ="Nombre d’opérations",xlab="", ylab = "")
shapiro.test(NB_OP)
hist(NBJ_DECOUVERT, col= "darkgreen", main ="Nombre de jours à découvert",xlab="", ylab = "")
shapiro.test(NBJ_DECOUVERT)
hist(TX_ENDET, col= "blue4", main ="Nombre de jours à découvert",xlab="", ylab = "")
shapiro.test(TX_ENDET)
hist(CREDITS, col= "cyan", main ="Nombre de jours à découvert",xlab="", ylab = "")
shapiro.test(CREDITS)
######################## Variables qualitatives########################################
install.packages("dplyr")
library(dplyr)
table(SEXE)
prop.table(table(SEXE))*100
table(SITUA_F)
prop.table(table(SITUA_F))*100
table(CSP)
prop.table(table(CSP))*100
table(NB_COMPTES)
prop.table(table(NB_COMPTES))*100
table(GOLD)
prop.table(table(GOLD))*100
####Diagramme des variables qualitatives###
install.packages("plotly")# le package pour représenter les camembert des variables qualitatives#
library(plotly)
##SEXE##
NSEXE = mastercard %>%
dplyr::group_by(SEXE)%>%
dplyr::summarise(Nombre = n())%>%
dplyr::arrange(desc(Nombre))%>%
dplyr::mutate(pour = Nombre*100/sum(Nombre))
NSEXE
qSEXE = plot_ly(NSEXE, labels = ~SEXE , values = ~pour, type = "pie")%>%
layout(title = "",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showtickslabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showtickslabels = FALSE))
qSEXE
##GOLD##
NGOLD = mastercard %>%
dplyr::group_by(GOLD)%>%
dplyr::summarise(Nombre = n())%>%
dplyr::arrange(desc(Nombre))%>%
dplyr::mutate(pour = Nombre*100/sum(Nombre))
NGOLD
qGOLD = plot_ly(NGOLD, labels = ~GOLD , values = ~pour, type = "pie")%>%
layout(title = "",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showtickslabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showtickslabels = FALSE))
qGOLD
##CSP##
NCSP = mastercard %>%
dplyr::group_by(CSP)%>%
dplyr::summarise(Nombre = n())%>%
dplyr::arrange(desc(Nombre))%>%
dplyr::mutate(pour = Nombre*100/sum(Nombre))
NCSP
qCSP = plot_ly(NCSP, labels = ~CSP , values = ~pour, type = "pie")%>%
layout(title = "",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showtickslabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showtickslabels = FALSE))
qCSP
##Situation familiale##
NSITUA_F = mastercard %>%
dplyr::group_by(SITUA_F)%>%
dplyr::summarise(Nombre = n())%>%
dplyr::arrange(desc(Nombre))%>%
dplyr::mutate(pour = Nombre*100/sum(Nombre))
NSITUA_F
qSITUA_F = plot_ly(NSITUA_F, labels = ~SITUA_F , values = ~pour, type = "pie")%>%
layout(title = "",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showtickslabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showtickslabels = FALSE))
qSITUA_F
######################################################################################################
######################################################################################################
#################################### STATISTIQUE BIVARIE##############################################
######################################################################################################
######################################################################################################
##########################Entre Variables qualitatives################################################
##SEXE##
table(GOLD, SEXE) # fréquences
ContingSex<-prop.table(table(GOLD, SEXE), margin = 1)*100 # profils lignes
chisq.test(table(GOLD, SEXE)) # test independance de khi-deux
mosaicplot(ContingSex, las = 3, shade = TRUE)
##SITUA_F##
ContingSitua<-table(GOLD, SITUA_F) # fréquences
prop.table(table(GOLD, SITUA_F), margin = 1)*100 # profils lignes
print(ContingSitua)
chi2situa <- chisq.test(ContingSitua)
print(chi2situa)
mosaicplot(ContingSitua, las = 3, shade = TRUE)
##SITUA_F##
table(GOLD, CSP) # fréquences
ContingCsp<-prop.table(table(GOLD, CSP), margin = 1)*100 # profils lignes
chi2Csp <- chisq.test(ContingCsp)
print(chi2Csp)
mosaicplot(ContingCsp, las = 3, shade = TRUE)
##Liens entre GOLD et les variables quantitatives##
library(ggplot2)
library(ggplot2)
install.packages("gplots")
##SITUA_F##
ContingSitua<-table(GOLD, SITUA_F) # fréquences
install.packages("corrplot")
library(corrplot)
mcor <- cor(mastercard[,c(3,5,7,8,9,10,12,14,15,16)])
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45) ##Matrice de corrélation##
###Corrélation entre nombre de compte et nombre d'opération###
plot(mastercard$NB_COMPTES, mastercard$NB_OP)
cor(mastercard$NB_COMPTES, mastercard$NB_OP)
library(readxl)
library(ggplot2)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(tidyverse)
library(AER)
library(memisc)
library(modelsummary)
library(pROC)
data <- read_excel("dataset_total.xlsx",col_names = TRUE)
view(data)
view(data_acm)
# Définir les variables actives
vars_actives <- c("EXTINCTIONBOX", "SUPPREMAIL", "TEMPSUTILTEL", "TEMPSPOSSTEL","CONVICTIONREPL4", "GESTEPRAT","OCCASIONREPL1", "MODIFHABREPL1","total_equipements")
# Définir les variables illustratives
vars_illustratives <- c("IMPACTNUM", "SOUTIENASSOREPL1", "SOUTIENASSOREPL2","VOTEECOLO","CONSOBIOREPL1", "Tageen5", "sexe", "nivetudes", "REVENUMENS","activite", "uda5", "profession_actif")
# Créer le nouveau dataset en combinant ces listes de variables
vars_necessaires <- c(vars_actives, vars_illustratives)
data_acm <- data[, vars_necessaires]
view(data_acm)
colnames(data_acm)
data_acm$total_equipements_class <- as.numeric(as.character(
cut(data_acm$total_equipements,
breaks = c(0, 7, 14, 21, 29),
labels = c("1", "2", "3", "4"),
include.lowest = TRUE,
right = TRUE)
))
data_acm$ total_equipements<- NULL
view(data_acm)
vars_illustratives <- c("IMPACTNUM", "SOUTIENASSOREPL1", "SOUTIENASSOREPL2", "VOTEECOLO", "Tageen5", "sexe", "nivetudes", "REVENUMENS", "activite", "uda5", "profession_actif")
active_vars <- setdiff(names(data_acm), vars_illustratives)
sapply(data_acm[active_vars], table)
active_vars <- setdiff(names(data_acm), vars_illustratives)
data_acm[active_vars] <- lapply(data_acm[active_vars], factor)
str(data_acm[active_vars])
# On précise l'ensemble des variables actives (le reste des colonnes)
res.acm <- MCA(data_acm, quali.sup = which(names(data_acm) %in% vars_illustratives))
library(ggrepel)
# Exemple de données avec des coordonnées issues de l'ACM
# Supposons que votre dataframe s'appelle 'df' avec les colonnes Dim1, Dim2 et un label (ex. : nom de la modalité ou de l'individu)
ggplot(df, aes(x = Dim1, y = Dim2, label = label)) +
geom_point() +
geom_text_repel(max.overlaps = Inf)
library(ggrepel)
# Exemple de données avec des coordonnées issues de l'ACM
# Supposons que votre dataframe s'appelle 'df' avec les colonnes Dim1, Dim2 et un label (ex. : nom de la modalité ou de l'individu)
ggplot(data_acm, aes(x = Dim1, y = Dim2, label = label)) +
geom_point() +
geom_text_repel(max.overlaps = Inf)
# Extraction des coordonnées
df_coords <- as.data.frame(res.acm$ind$coord)
# Vérifiez les noms de colonnes
names(df_coords)
df_coords$label <- rownames(df_coords)
library(ggplot2)
library(ggrepel)
ggplot(df_coords, aes(x = Dim1, y = Dim2, label = label)) +
geom_point() +
geom_text_repel(max.overlaps = Inf)
library(ggplot2)
library(ggrepel)
ggplot(df_coords, aes(x = "Dim 1", y = "Dim 2", label = label)) +
geom_point() +
geom_text_repel(max.overlaps = Inf)
summary(res.acm)
plot(res.mca)
plot(res.acm)
plot(res.acm, invisible=c("active_vars"))
plot(res.acm, invisible=c("ind"))
plot(res.acm, invisible=c("ind"),autoLab = "y")
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7)
plot(res.acm, invisible=c("ind","var"),autoLab = "y", cex=0.7)
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7, selecMod="cos2 10")
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7, selecMod="contrib 20")
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7,axes=3:4 )
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7,axes=3:4 )
library(readxl)
library(ggplot2)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(tidyverse)
library(AER)
library(memisc)
library(modelsummary)
library(pROC)
data <- read_excel("dataset_total.xlsx",col_names = TRUE)
view(data)
# Définir les variables actives
vars_actives <- c("EXTINCTIONBOX", "SUPPREMAIL", "TEMPSUTILTEL", "TEMPSPOSSTEL","CONVICTIONREPL4", "GESTEPRAT","OCCASIONREPL1", "MODIFHABREPL1","total_equipements")
# Définir les variables illustratives
vars_illustratives <- c("IMPACTNUM", "SOUTIENASSOREPL1", "SOUTIENASSOREPL2","VOTEECOLO","CONSOBIOREPL1", "Tageen5", "sexe", "nivetudes", "REVENUMENS","activite", "uda5", "profession_actif")
# Créer le nouveau dataset en combinant ces listes de variables
vars_necessaires <- c(vars_actives, vars_illustratives)
data_acm <- data[, vars_necessaires]
view(data_acm)
colnames(data_acm)
data_acm$total_equipements_class <- as.numeric(as.character(
cut(data_acm$total_equipements,
breaks = c(0, 7, 14, 21, 29),
labels = c("1", "2", "3", "4"),
include.lowest = TRUE,
right = TRUE)
))
data_acm$ total_equipements<- NULL
view(data_acm)
data_acm$total_equipements_class <- factor(data_acm$total_equipements_class, levels = 1:4)
vars_illustratives <- c("IMPACTNUM", "SOUTIENASSOREPL1", "SOUTIENASSOREPL2","VOTEECOLO","CONSOBIOREPL1", "Tageen5", "sexe", "nivetudes", "REVENUMENS","activite", "uda5", "profession_actif")
active_vars <- setdiff(names(data_acm), vars_illustratives)
sapply(data_acm[active_vars], table)
active_vars <- setdiff(names(data_acm), vars_illustratives)
data_acm[active_vars] <- lapply(data_acm[active_vars], factor)
str(data_acm[active_vars])
# On précise l'ensemble des variables actives (le reste des colonnes)
res.acm <- MCA(data_acm, quali.sup = which(names(data_acm) %in% vars_illustratives))
summary(res.acm)
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7)
plot(res.acm, invisible=c("ind","var"),autoLab = "y", cex=0.7)
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7, selecMod="contrib 20")
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7,axes=3:4 )
vars_illustratives <- c("IMPACTNUM", "SOUTIENASSOREPL1", "SOUTIENASSOREPL2","VOTEECOLO","CONSOBIOREPL1", "Tageen5", "sexe", "nivetudes", "REVENUMENS","activite", "uda5", "profession_actif")
active_vars <- setdiff(names(data_acm), vars_illustratives)
sapply(data_acm[active_vars], table)
vars_illustratives <- c("IMPACTNUM", "SOUTIENASSOREPL1", "SOUTIENASSOREPL2","VOTEECOLO","CONSOBIOREPL1", "Tageen5", "sexe", "nivetudes", "REVENUMENS","activite", "uda5", "profession_actif")
active_vars <- setdiff(names(data_acm), vars_illustratives)
sapply(data_acm[active_vars], table)
active_vars <- setdiff(names(data_acm), vars_illustratives)
data_acm[active_vars] <- lapply(data_acm[active_vars], factor)
str(data_acm[active_vars])
# On précise l'ensemble des variables actives (le reste des colonnes)
res.acm <- MCA(data_acm, quali.sup = which(names(data_acm) %in% vars_illustratives))
plot(res.acm, invisible=c("ind","var"),autoLab = "y", cex=0.7)
library(readxl)
library(ggplot2)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(tidyverse)
library(AER)
library(memisc)
library(modelsummary)
library(pROC)
data <- read_excel("dataset_total.xlsx",col_names = TRUE)
view(data)
# DC)finir les variables actives
vars_actives <- c("EXTINCTIONBOX", "SUPPREMAIL", "TEMPSUTILTEL", "TEMPSPOSSTEL","CONVICTIONREPL4", "GESTEPRAT","OCCASIONREPL1", "MODIFHABREPL1","total_equipements")
# DC)finir les variables illustratives
vars_illustratives <- c("IMPACTNUM", "SOUTIENASSOREPL1", "SOUTIENASSOREPL2","VOTEECOLO","CONSOBIOREPL1", "Tageen5", "sexe", "nivetudes", "REVENUMENS","activite", "uda5", "profession_actif")
# CrC)er le nouveau dataset en combinant ces listes de variables
vars_necessaires <- c(vars_actives, vars_illustratives)
data_acm <- data[, vars_necessaires]
view(data_acm)
colnames(data_acm)
data_acm$total_equipements_class <- as.numeric(as.character(
cut(data_acm$total_equipements,
breaks = c(0, 7, 14, 21, 29),
labels = c("1", "2", "3", "4"),
include.lowest = TRUE,
right = TRUE)
))
data_acm$total_equipements_class <- as.numeric(as.character(
cut(data_acm$total_equipements,
breaks = c(0, 7, 14, 21, 29),
labels = c("1", "2", "3", "4"),
include.lowest = TRUE,
right = TRUE)
))
data_acm$total_equipements_class <- as.numeric(as.character(
cut(data_acm$total_equipements,
breaks = c(0, 7, 14, 21, 29),
labels = c("1", "2", "3", "4"),
include.lowest = TRUE,
right = TRUE)
))
data_acm$ total_equipements<- NULL
# Pour afficher toutes les modalités des variables actives
View(res.acm$var$coord)  # Ouvre une fenêtre de visualisation dans RStudio
write.csv(res.acm$var$coord, file = "var_coord.csv")
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7,axes=1:3 )
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7,axes=1,3 )
plot(res.acm, choix = "eig")
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7,axes=1:3 )
plot(res.acm, invisible = c("ind"), autoLab = "y", cex = 0.7, axes = c(1, 3))
str(data_acm[vars_illustratives])
active_vars <- setdiff(names(data_acm), vars_illustratives)
data_acm[active_vars] <- lapply(data_acm[active_vars], factor)
# Transformation des variables illustratives en facteurs (optionnel)
data_acm[vars_illustratives] <- lapply(data_acm[vars_illustratives], factor)
str(data_acm[active_vars])
str(data_acm[vars_illustratives])
# On prC)cise l'ensemble des variables actives (le reste des colonnes)
res.acm <- MCA(data_acm, quali.sup = which(names(data_acm) %in% vars_illustratives))
summary(res.acm)
# Pour afficher toutes les modalités des variables actives
View(res.acm$var$coord)  # Ouvre une fenêtre de visualisation dans RStudio
write.csv(res.acm$var$coord, file = "var_coord.csv")
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7)
plot(res.acm, invisible=c("ind","var"),autoLab = "y", cex=0.7)
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7, selecMod="contrib 20")
plot(res.acm, invisible=c("ind"),autoLab = "y", cex=0.7, selecMod="contrib20")
plot(res.acm, invisible = c("ind"), autoLab = "y", cex = 0.7, axes = c(1, 3))
res.acm <- MCA(data, quali.sup = c(...))  # votre ACM
coords  <- res.acm$ind$coord             # coordonnées des individus
coords_reduced <- coords[, 1:5]  # On garde les 5 premiers axes
##CLUSTERING HIERARCHIQUE
library(FactoMineR)
library(factoextra)  # Pour des visualisations supplémentaires
# Sur l'objet res.acm
res.hcpc <- HCPC(res.acm,
nb.clust = -1,  # -1 => vous laisse choisir le nombre de clusters
graph = FALSE)
# Les clusters attribués à chaque individu :
cluster_membership <- res.hcpc$data.clust$clust
coords  <- res.acm$ind$coord             # coordonnées des individus
coords_reduced <- coords[, 1:5]  # On garde les 5 premiers axes
##CLUSTERING HIERARCHIQUE
library(FactoMineR)
library(factoextra)  # Pour des visualisations supplémentaires
# Sur l'objet res.acm
res.hcpc <- HCPC(res.acm,
nb.clust = 5,  # -1 => vous laisse choisir le nombre de clusters
graph = FALSE)
# Les clusters attribués à chaque individu :
cluster_membership <- res.hcpc$data.clust$clust
### K-MEANS
# Supposez que vous avez coords_reduced (axes 1 à 5)
set.seed(123)  # Pour rendre les résultats reproductibles
res.kmeans <- kmeans(coords_reduced, centers = 4, nstart = 25)
# Ajout de la variable cluster dans votre jeu de données initial
data$cluster <- factor(res.kmeans$cluster)
### K-MEANS
# Supposez que vous avez coords_reduced (axes 1 à 5)
set.seed(123)  # Pour rendre les résultats reproductibles
res.kmeans <- kmeans(coords_reduced, centers = 4, nstart = 25)
# Ajout de la variable cluster dans votre jeu de données initial
data$cluster <- factor(res.kmeans$cluster)
coords  <- res.acm$ind$coord             # coordonnées des individus
coords_reduced <- coords[, 1:5]  # On garde les 5 premiers axes
library(factoextra)
# Visualisation de la méthode du coude
fviz_nbclust(coords_reduced, kmeans, method = "wss") +
ggtitle("Méthode du coude pour déterminer le nombre optimal de clusters")
library(factoextra)
# Visualisation de la méthode du coude
fviz_nbclust(coords_reduced, kmeans, method = "wss") +
ggtitle("Methode du coude pour determiner le nombre optimal de clusters")
# Visualisation de l'indice de silhouette
fviz_nbclust(coords_reduced, kmeans, method = "silhouette") +
ggtitle("Indice de silhouette pour le choix du nombre de clusters")
# Extraction des axes 1 et 3
coords_1_3 <- as.data.frame(res.acm$ind$coord[, c(1,3)])
names(coords_1_3) <- c("Dim1", "Dim3")
# Réappliquer k-means sur le même clustering (les clusters restent identiques)
# Puis visualiser dans l'espace 1-3 :
fviz_cluster(res.kmeans, data = coords_1_3,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal(),
main = "Clusters visualisés sur l'axe 1 et l'axe 3")
# Extraction des axes 1 et 3
coords_1_3 <- as.data.frame(res.acm$ind$coord[, c(1,3)])
names(coords_1_3) <- c("Dim1", "Dim3")
# Réappliquer k-means sur le même clustering (les clusters restent identiques)
# Puis visualiser dans l'espace 1-3 :
fviz_cluster(res.kmeans, data = coords_1_3,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal(),
main = "Clusters visualises sur l'axe 1 et l'axe 3")
# Extraction des axes 1 et 3
coords_1_3 <- as.data.frame(res.acm$ind$coord[, c(1,2)])
names(coords_1_2) <- c("Dim1", "Dim2")
# Extraction des axes 1 et 3
coords_1_2 <- as.data.frame(res.acm$ind$coord[, c(1,2)])
names(coords_1_2) <- c("Dim1", "Dim2")
# Réappliquer k-means sur le même clustering (les clusters restent identiques)
# Puis visualiser dans l'espace 1-2 :
fviz_cluster(res.kmeans, data = coords_1_2,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal(),
main = "Clusters visualises sur l'axe 1 et l'axe 2")
set.seed(123)  # Pour rendre les résultats reproductibles
res.kmeans <- kmeans(coords_reduced, centers = 6, nstart = 25)
# Extraction des axes 1 et 2
coords_1_2 <- as.data.frame(res.acm$ind$coord[, c(1,2)])
names(coords_1_2) <- c("Dim1", "Dim2")
# Réappliquer k-means sur le même clustering (les clusters restent identiques)
# Puis visualiser dans l'espace 1-2 :
fviz_cluster(res.kmeans, data = coords_1_2,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal(),
main = "Clusters visualises sur l'axe 1 et l'axe 2")
getwd()
setwd("D:/IMTA/DATASANTE/prjt/Data-sante")
shiny::runApp()
tags$head(tags$meta(charset = "UTF-8")),
runApp()
getwd()
shiny::runApp()
getwd()
shiny::runApp()
runApp()
shiny::runApp()
