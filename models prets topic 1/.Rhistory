)
)
)
),
box(
title = "Aperçu du Dataset",
width = 12,
status = "success",
solidHeader = TRUE,
DTOutput("data_table")
)
)
),
tabItem(
tabName = "Résultats",
fluidRow(
box(
title = "Questionnaire",
width = 12,
status = "primary",
solidHeader = TRUE,
# Socio-économique / Scolaire
selectInput("sexe", "Sexe :", choices = c("Garçon", "Fille")),
selectInput("niveau_scol", "Niveau scolaire :", choices = c("Collège", "Lycée pro", "Lycée général/techno")),
sliderInput("age", "Âge :", min = 10, max = 25, value = 15),
selectInput("situation_fin", "Situation financière de ta famille :", choices = c("Très à l'aise", "Plutôt à l’aise", "Moyennement", "Très peu", "Pas du tout", "Je ne sais pas")),
selectInput("absence_scol", "Jours d'absence sans permission :", choices = c("0", "1-2", "3-5", "6-9", "10+")),
selectInput("secu_scol", "Te sens-tu en sécurité à l’école ?", choices = c("Jamais", "Rarement", "Parfois", "La plupart du temps", "Toujours")),
checkboxGroupInput("violence_scol", "As-tu peur de la violence à l’école ?", choices = c("Frappé(e)", "Volé(e)/Racketté(e)", "Insulté(e)/Moqué(e)", "Violence en ligne")),
selectInput("ecole_love", "Aimes-tu l'école ?", choices = c("Beaucoup", "Un peu", "Pas beaucoup", "Pas du tout")),
selectInput("result5ts_s3ol", "Classement scolaire :", choices = c("Parmi les meilleurs", "Plus fort que la moyenne", "Dans la moyenne", "Plus faible", "Parmi les moins bons")),
# Santé / Perception de soi
selectInput("sante", "Santé perçue :", choices = c("Très bonne", "Bonne", "Moyenne", "Mauvaise", "Très mauvaise")),
selectInput("etat_corps", "Perception du corps :", choices = c("Beaucoup trop maigre", "Un peu trop maigre", "A peu près bon poids", "Un peu trop gros", "Beaucoup trop gros")),
selectInput("accord_poids", "Heureux avec ton poids ?", choices = c("Oui", "Non")),
selectInput("est_malade", "As-tu une maladie ou un handicap ?", choices = c("Oui", "Non")),
checkboxGroupInput("maladie_trouble_langage", "As-tu des troubles du langage ?", choices = c("Bégaiement", "Dyslexie", "Dysphasie")),
checkboxGroupInput("maladie_handicap_intellectuel", "Handicap intellectuel/psychique ?", choices = c("Autisme", "Hyperactivité")),
checkboxGroupInput("maladie_epilepsie", "Épilepsie ?", choices = c("Oui")),
selectInput("visite_medecin", "Dernière visite médicale :", choices = c("<1 an", "1-2 ans", ">2 ans", "Je ne sais pas")),
selectInput("prof_sante", "Vois-tu un professionnel de santé si besoin ?", choices = c("Oui", "Non")),
# Alimentation et hygiène de vie
selectInput("alimentation_saine", "Manges-tu équilibré ?", choices = c("Oui", "Non", "Je ne sais pas")),
selectInput("ptit_dej_semaine", "Petit-déj du lundi au vendredi :", choices = c("Jamais", "Pas tous les jours", "Tous les jours")),
selectInput("ptit_dej_weekend", "Petit-déj le week-end :", choices = c("Jamais", "Un jour", "Deux jours")),
selectInput("manger_fruits", "Consommation de fruits :", choices = c("Jamais", "Moins 1/sem", "1/sem", "Plrs/sem", "1/jour", ">1/jour")),
selectInput("manger_legumes", "Consommation de légumes :", choices = c("Jamais", "Moins 1/sem", "1/sem", "Plrs/sem", "1/jour", ">1/jour")),
selectInput("mange_sucre", "Consommation de sucre :", choices = c("Jamais", "Moins 1/sem", "1/sem", "Plrs/sem", "1/jour", ">1/jour")),
selectInput("mange_repas_rapide", "Consommation de fast-food :", choices = c("Jamais", "Moins 1/sem", "1/sem", "Plrs/sem", "1/jour", ">1/jour")),
sliderInput("jour_sport", "Jours de sport cette semaine :", min = 0, max = 7, value = 3),
selectInput("sport_extra", "Fais-tu du sport hors école ?", choices = c("Jamais", "1x/mois", "1x/sem", "2-3x/sem", "Tous les jours")),
# Ressenti / soutien social
selectInput("sm7", "As-tu tenté de te suicider ?", choices = c("Non" = 0, "Oui" = 1)),
selectInput("cv1", "Temps dans un véhicule par jour :", choices = c("Aucun", "<=30min", "30min-1h", "1h-1h30", "1h30-2h", ">2h")),
selectInput("cv2a", "Es-tu monté avec qqun qui avait bu ?", choices = c("Jamais", "1x", "2-3x", "4-5x", "6x ou plus")),
selectInput("cv2b", "Es-tu monté avec qqun drogué ?", choices = c("Jamais", "1x", "2-3x", "4-5x", "6x ou plus")),
selectInput("cv3", "As-tu déjà conduit un véhicule ?", choices = c("Oui avec permis", "Oui sans permis", "Non")),
selectInput("cv5", "Mets-tu ta ceinture ?", choices = c("Jamais", "Rarement", "Parfois", "Souvent", "Toujours")),
# Violences
selectInput("vi1", "As-tu été victime de violence physique ?", choices = c("Oui", "Non")),
checkboxGroupInput("vi2_Personne_mon_age", "Violence par personne de ton âge ?", choices = c("Oui")),
checkboxGroupInput("vi2_Membre_famille", "Violence par un membre de la famille ?", choices = c("Oui")),
checkboxGroupInput("vi2_Quelquun_inconnu", "Violence par un inconnu ?", choices = c("Oui")),
checkboxGroupInput("vi3_Ecole", "Lieu : école ?", choices = c("Oui")),
checkboxGroupInput("vi3_Maison", "Lieu : maison ?", choices = c("Oui")),
checkboxGroupInput("vi3_Quartier", "Lieu : quartier ?", choices = c("Oui")),
checkboxGroupInput("vi4_Personne_violente", "Raison : personne violente ?", choices = c("Oui")),
checkboxGroupInput("vi4_Resultats_scolaires", "Raison : résultats scolaires ?", choices = c("Oui")),
checkboxGroupInput("vi4_Colere", "Raison : colère ?", choices = c("Oui")),
checkboxGroupInput("vi4_Corps_image", "Raison : image du corps ?", choices = c("Oui")),
checkboxGroupInput("vi4_Comportement", "Raison : comportement ?", choices = c("Oui")),
checkboxGroupInput("vi4_Alcool_drogues", "Raison : alcool/drogue ?", choices = c("Oui")),
# Addictions
selectInput("ad3_Cannabis", "As-tu consommé du cannabis ?", choices = c("Oui", "Non")),
selectInput("ad3_Cocaine", "As-tu consommé de la cocaïne ?", choices = c("Oui", "Non")),
selectInput("ad3_Alcool", "As-tu consommé de l’alcool ?", choices = c("Oui", "Non")),
# Sexualité
checkboxGroupInput("ss6_Dispensaire_CMS_ESPAS_CMP_CCF", "Préservatif obtenu dans :", choices = c("Dispensaire/CMS/ESPAS/CMP/CCF")),
checkboxGroupInput("ss6_College_Lycee", "Préservatif obtenu au collège/lycée ?", choices = c("Oui")),
checkboxGroupInput("ss7_Partenaire_ne_voulait_pas", "Partenaire ne voulait pas de préservatif ?", choices = c("Oui")),
checkboxGroupInput("ss7_Alcool_fume", "Rapport sous alcool/fumée ?", choices = c("Oui")),
# Image de soi
checkboxGroupInput("ss12_Choquant", "Tu as trouvé le porno choquant ?", choices = c("Oui")),
checkboxGroupInput("ss12_Accepte_d_en_faire", "As-tu accepté d'en faire ?", choices = c("Oui")),
checkboxGroupInput("ss12_Pas_aime", "Tu n'as pas aimé ?", choices = c("Oui")),
checkboxGroupInput("ss12_Reconnu_personnes", "As-tu reconnu des personnes ?", choices = c("Oui")),
checkboxGroupInput("ss12_Reconnu_moi_meme", "Tu t'es reconnu(e) ?", choices = c("Oui"))
)
)
)
,
# Onglet resultats
tabItem(
tabName = "Résultats",
fluidRow(
box(
title = "Résultats",
width = 12,
status = "success",
solidHeader = TRUE,
"Les différentes prédictions......."
)
)
),
# Onglet explcations
tabItem(
tabName = "Explications",
fluidRow(
box(
title = "explications",
width = 12,
status = "success",
solidHeader = TRUE,
"Les différentes prédictions......."
)
)
)
)  # Fin tabItems
)  # Fin dashboardBody
)  # Fin dashboardPage
# Serveur
server <- function(input, output, session) {
# 1. Afficher le dataset avec scroll horizontal
output$data_table <- DT::renderDataTable({
DT::datatable(data, options = list(scrollX = TRUE))
})
# 2. Plot univarié
output$univPlot <- renderPlot({
var <- input$variable
x_data <- factor(df[[var]])
ggplot(df, aes(x = x_data)) +
geom_bar(fill = "lightgreen", color = "white") +
labs(title = paste("Distribution de", var), x = var, y = "Fréquence") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# 3. Réponses du questionnaire encodées à partir de 1
encode_input <- function(x) {
if (is.null(x)) return(NA)
if (is.character(x)) return(as.integer(factor(x)))
if (is.numeric(x)) return(as.integer(x) + 1)
if (is.logical(x)) return(as.integer(x) + 1)
return(NA)
}
observeEvent(input$sm1, {
reponses_encodées <- list(
sexe = encode_input(input$sexe),
niveau_scol = encode_input(input$niveau_scol),
age = input$age,
situation_fin = encode_input(input$situation_fin),
absence_scol = encode_input(input$absence_scol),
secu_scol = encode_input(input$secu_scol),
violence_scol = length(input$violence_scol) + 1,
ecole_love = encode_input(input$ecole_love),
result5ts_s3ol = encode_input(input$result5ts_s3ol),
sante = encode_input(input$sante),
etat_corps = encode_input(input$etat_corps),
accord_poids = encode_input(input$accord_poids),
est_malade = encode_input(input$est_malade),
maladie_trouble_langage = length(input$maladie_trouble_langage) + 1,
maladie_handicap_intellectuel = length(input$maladie_handicap_intellectuel) + 1,
maladie_epilepsie = length(input$maladie_epilepsie) + 1,
visite_medecin = encode_input(input$visite_medecin),
prof_sante = encode_input(input$prof_sante),
alimentation_saine = encode_input(input$alimentation_saine),
ptit_dej_semaine = encode_input(input$ptit_dej_semaine),
ptit_dej_weekend = encode_input(input$ptit_dej_weekend),
manger_fruits = encode_input(input$manger_fruits),
manger_legumes = encode_input(input$manger_legumes),
mange_sucre = encode_input(input$mange_sucre),
mange_repas_rapide = encode_input(input$mange_repas_rapide),
jour_sport = input$jour_sport,
sport_extra = encode_input(input$sport_extra),
sm7 = encode_input(input$sm7),
cv1 = encode_input(input$cv1),
cv2a = encode_input(input$cv2a),
cv2b = encode_input(input$cv2b),
cv3 = encode_input(input$cv3),
cv5 = encode_input(input$cv5),
vi1 = encode_input(input$vi1),
vi2_Personne_mon_age = length(input$vi2_Personne_mon_age) + 1,
vi2_Membre_famille = length(input$vi2_Membre_famille) + 1,
vi2_Quelquun_inconnu = length(input$vi2_Quelquun_inconnu) + 1,
vi3_Ecole = length(input$vi3_Ecole) + 1,
vi3_Maison = length(input$vi3_Maison) + 1,
vi3_Quartier = length(input$vi3_Quartier) + 1,
vi4_Personne_violente = length(input$vi4_Personne_violente) + 1,
vi4_Resultats_scolaires = length(input$vi4_Resultats_scolaires) + 1,
vi4_Colere = length(input$vi4_Colere) + 1,
vi4_Corps_image = length(input$vi4_Corps_image) + 1,
vi4_Comportement = length(input$vi4_Comportement) + 1,
vi4_Alcool_drogues = length(input$vi4_Alcool_drogues) + 1,
ad3_Cannabis = encode_input(input$ad3_Cannabis),
ad3_Cocaine = encode_input(input$ad3_Cocaine),
ad3_Alcool = encode_input(input$ad3_Alcool),
ss6_Dispensaire_CMS_ESPAS_CMP_CCF = length(input$ss6_Dispensaire_CMS_ESPAS_CMP_CCF) + 1,
ss6_College_Lycee = length(input$ss6_College_Lycee) + 1,
ss7_Partenaire_ne_voulait_pas = length(input$ss7_Partenaire_ne_voulait_pas) + 1,
ss7_Alcool_fume = length(input$ss7_Alcool_fume) + 1,
ss12_Choquant = length(input$ss12_Choquant) + 1,
ss12_Accepte_d_en_faire = length(input$ss12_Accepte_d_en_faire) + 1,
ss12_Pas_aime = length(input$ss12_Pas_aime) + 1,
ss12_Reconnu_personnes = length(input$ss12_Reconnu_personnes) + 1,
ss12_Reconnu_moi_meme = length(input$ss12_Reconnu_moi_meme) + 1
)
print(reponses_encodées)  # Remplace par prédiction ou sauvegarde CSV si besoin
})
}
# Lancer l'application Shiny
shinyApp(ui, server)
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
runApp()
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
table(test)
table(test)
table(test[1:100,])
table(test[1:100,..])
table(test[1:100,.])
table(test[1:100;])
table(test[1:100,])
table(test[1:,])
table(test[:10,])
table(test[10,])
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel("dataset_complet1.xlsx")
df <- as.data.table(data)
# Sélectionner les 10 premières colonnes
cols_interest <- colnames(df)[250:317]
# Calculer les occurrences (y compris NA) sur les 10 premières colonnes
unique_values <- lapply(cols_interest, function(col) {
as.data.frame(table(df[[col]], useNA = "ifany"))
})
# Donner les noms des colonnes à la liste
names(unique_values) <- cols_interest
# Afficher les résultats
unique_values
# Liste de tes colonnes d'intérêt
cols_interest <- c(
"communaute_1", "communaute_2", "communaute_3", "communaute_4", "communaute_5",
"communaute_6", "communaute_7", "communaute_8", "communaute_9", "result5ts_s3ol",
"accord_poids", "es8", "es9", "es9b", "as3_1", "as3_2", "as3_3", "as3_4", "as3_5",
"as3_6", "as3_7", "as3_8", "as3_9", "as3_10", "al4_1", "al4_2", "al4_3", "al4_4",
"al4_5", "al5_6", "al5_7", "heure_sport_extra", "sport_amusement", "sport_detente",
"sport_amitie", "sport_talent", "sport_competition", "sport_occupation",
"sport_obligation", "sport_beaute", "sport_perte_poids", "sport_sante",
"sport_autre", "no_sport_1", "no_sport_2", "no_sport_3", "no_sport_4",
"no_sport_5", "no_sport_6", "no_sport_7", "no_sport_8", "no_sport_9",
"no_sport_10", "no_sport_autre", "sm5", "sm6", "sm7", "cv4a", "cv4b",
"tb2", "tb3", "tb4", "tb5", "tb7", "tb8", "ao2a", "ao2b", "ao3a", "ao3b",
"ao3c", "ao3d", "ao4", "ao5", "ao6", "ao7", "ao9", "ao10", "ao11",
"cn2", "cn3", "cn4", "cn6", "cn7", "ad1", "ad2",
"ss1", "ss2", "ss3", "ss4", "ss5", "ss8", "ss10", "ss11",
"pr1a", "pr1b", "pr1c", "pr1d", "pr1e", "pr1f", "pr1g", "pr1h",
"pr2a", "pr2b", "pr2c", "pr2d", "pr2e", "pr2f", "pr2g", "pr2h"
)
# Sélectionner les 30 premières colonnes d'intérêt
cols_30 <- cols_interest[1:30]
# Donner les noms des colonnes à la liste
names(unique_values) <- cols_interest
# Afficher les résultats
unique_values
# Liste de tes colonnes d'intérêt
cols_interest <- c(
"communaute_1", "communaute_2", "communaute_3", "communaute_4", "communaute_5",
"communaute_6", "communaute_7", "communaute_8", "communaute_9", "result5ts_s3ol",
"accord_poids", "es8", "es9", "es9b", "as3_1", "as3_2", "as3_3", "as3_4", "as3_5",
"as3_6", "as3_7", "as3_8", "as3_9", "as3_10", "al4_1", "al4_2", "al4_3", "al4_4",
"al4_5", "al5_6", "al5_7", "heure_sport_extra", "sport_amusement", "sport_detente",
"sport_amitie", "sport_talent", "sport_competition", "sport_occupation",
"sport_obligation", "sport_beaute", "sport_perte_poids", "sport_sante",
"sport_autre", "no_sport_1", "no_sport_2", "no_sport_3", "no_sport_4",
"no_sport_5", "no_sport_6", "no_sport_7", "no_sport_8", "no_sport_9",
"no_sport_10", "no_sport_autre", "sm5", "sm6", "sm7", "cv4a", "cv4b",
"tb2", "tb3", "tb4", "tb5", "tb7", "tb8", "ao2a", "ao2b", "ao3a", "ao3b",
"ao3c", "ao3d", "ao4", "ao5", "ao6", "ao7", "ao9", "ao10", "ao11",
"cn2", "cn3", "cn4", "cn6", "cn7", "ad1", "ad2",
"ss1", "ss2", "ss3", "ss4", "ss5", "ss8", "ss10", "ss11",
"pr1a", "pr1b", "pr1c", "pr1d", "pr1e", "pr1f", "pr1g", "pr1h",
"pr2a", "pr2b", "pr2c", "pr2d", "pr2e", "pr2f", "pr2g", "pr2h"
)
# Sélectionner les 30 premières colonnes d'intérêt
cols_30 <- cols_interest[1:30]
# Calculer les fréquences (y compris les NA) sur ces 30 colonnes
frequencies_30 <- lapply(cols_30, function(col) {
as.data.frame(table(df[[col]], useNA = "ifany"))
})
# Associer les noms des colonnes aux résultats
names(frequencies_30) <- cols_30
# Afficher le résultat
frequencies_30
# Étape 1 : Calculer la fréquence (avec NA) sur toutes les colonnes d'intérêt
frequencies <- lapply(cols_interest, function(col) {
as.data.frame(table(df[[col]], useNA = "ifany"))
})
names(frequencies) <- cols_interest
# Étape 2 : Sélectionner les colonnes où le nombre de NA est < 300
cols_na_inf_300 <- names(frequencies)[sapply(frequencies, function(freq_table) {
na_count <- freq_table$Freq[is.na(freq_table$Var1)]
if (length(na_count) == 0) na_count <- 0
na_count < 404
})]
# Résultat : noms des colonnes respectant la condition
print(cols_na_inf_300)
# Tes listes
colonnes_avec_na <- c("communaute_1", "communaute_2", "communaute_3", "communaute_4", "communaute_5",
"communaute_6", "communaute_7", "communaute_8", "communaute_9", "result5ts_s3ol",
"accord_poids", "es8", "es9", "es9b", "as3_1", "as3_2", "as3_3", "as3_4", "as3_5",
"as3_6", "as3_7", "as3_8", "as3_9", "as3_10", "al4_1", "al4_2", "al4_3", "al4_4",
"al4_5", "al5_6", "al5_7", "heure_sport_extra", "sport_amusement", "sport_detente",
"sport_amitie", "sport_talent", "sport_competition", "sport_occupation",
"sport_obligation", "sport_beaute", "sport_perte_poids", "sport_sante",
"sport_autre", "no_sport_1", "no_sport_2", "no_sport_3", "no_sport_4",
"no_sport_5", "no_sport_6", "no_sport_7", "no_sport_8", "no_sport_9",
"no_sport_10", "no_sport_autre", "sm5", "sm6", "sm7", "cv4a", "cv4b",
"tb2", "tb3", "tb4", "tb5", "tb7", "tb8", "ao2a", "ao2b", "ao3a", "ao3b",
"ao3c", "ao3d", "ao4", "ao5", "ao6", "ao7", "ao9", "ao10", "ao11",
"cn2", "cn3", "cn4", "cn6", "cn7", "ad1", "ad2",
"ss1", "ss2", "ss3", "ss4", "ss5", "ss8", "ss10", "ss11",
"pr1a", "pr1b", "pr1c", "pr1d", "pr1e", "pr1f", "pr1g", "pr1h",
"pr2a", "pr2b", "pr2c", "pr2d", "pr2e", "pr2f", "pr2g", "pr2h")
moins_de_400_na <- c("communaute_1", "communaute_2", "communaute_3", "communaute_4", "communaute_5",
"communaute_6", "communaute_7", "communaute_8", "communaute_9", "result5ts_s3ol",
"accord_poids", "sm6", "sm7", "tb8", "ad1", "ad2", "ss2", "ss11",
"pr1a", "pr1b", "pr1c", "pr1d", "pr1e", "pr1f", "pr1g", "pr1h")
# Calcul des colonnes avec plus de 400 NA
plus_de_400_na <- setdiff(colonnes_avec_na, moins_de_400_na)
# Résultat
print(plus_de_400_na)
frequencies_30 <- lapply(plus_de_400_na, function(col) {
as.data.frame(table(df[[col]], useNA = "ifany"))
})
# Associer les noms des colonnes aux résultats
names(frequencies_30) <- plus_de_400_na
# Afficher le résultat
frequencies_30
# Liste des colonnes avec plus de 400 NA (calculée précédemment)
plus_de_400_na <- setdiff(colonnes_avec_na, moins_de_400_na)
# Exclure ces colonnes de df
colonnes_a_garder <- setdiff(colnames(df), plus_de_400_na)
# Résultat : les noms des colonnes filtrées
print(colonnes_a_garder)
frequencies_30 <- lapply(colonnes_a_garder, function(col) {
as.data.frame(table(df[[col]], useNA = "ifany"))
})
# Associer les noms des colonnes aux résultats
names(colonnes_a_garder) <- colonnes_a_garder
# Afficher le résultat
frequencies_30
df_filtre <- df[, ..colonnes_a_garder]
df_filtre
# 4. (Facultatif) Garder uniquement les lignes complètes (sans NA)
df_filtre <- df_filtre[complete.cases(df_filtre), ]
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
runApp('C:/Users/LENOVO/Desktop/data_santé/projet/Data-sante')
return (as.integer(x))
# Charger les bibliothèques nécessaires
library(tidymodels)
library(data.table)
library(readxl)
# Charger les données
data <- read_excel('dataset_complet3.xlsx')
df <- as.data.table(data)
df <- df[complete.cases(df), ]
columns_of_interest <- colnames(df)
columns_of_interest <- colnames(df)
# Filtrer le dataframe pour ne garder que les colonnes d'intérêt
df_filtered <- df[, ..columns_of_interest]
# Split dataset (Train/Test)
df_split <- initial_split(df_filtered, prop = 0.8)
train <- training(df_split)
test <- testing(df_split)
target_columns <- c( 'sm2a', 'sm2b', 'sm2c', 'sm1', 'sm3', 'sm6' )
train[, (target_columns) := lapply(.SD, as.factor), .SDcols = target_columns]
test[, (target_columns) := lapply(.SD, as.factor), .SDcols = target_columns]
target_column <- 'sm1'
table(train[[target_column]])
table(test[[target_column]])
binarize_target <- function(df, target) {
if (target == "sm1") {
df[[target]] <- ifelse(df[[target]] %in% c(0, 1, 2), 1, 2)
} else if (target == "sm3") {
# sm3: 1 (faible) vs 2-3 (élevé)
df[[target]] <- ifelse(df[[target]] %in% c(1, 2), 1, 2)
} else if (target %in% c("sm2a", "sm2b", "sm2c")) {
# sm2x : 1-2 (faible) vs 3-5 (élevé)
df[[target]] <- ifelse(df[[target]] %in% c(1, 2, 3), 1, 2)
}
df[[target]] <- as.factor(df[[target]])
return(df)
}
train<- binarize_target(train,'sm3')
train<- binarize_target(train,'sm1')
train<- binarize_target(train,'sm2a')
train<- binarize_target(train,'sm2b')
train<- binarize_target(train,'sm2c')
table(train$sm3)
table(train$sm1)
table(train$sm2a)
table(train$sm2b)
table(train$sm2c)
test<- binarize_target(test,'sm3')
test<- binarize_target(test,'sm1')
test<- binarize_target(test,'sm2a')
test<- binarize_target(test,'sm2b')
test<- binarize_target(test,'sm2c')
table(train$sm3)
table(train$sm1)
table(train$sm2a)
table(train$sm2b)
table(train$sm2c)
table(test$sm3)
table(test$sm1)
table(test$sm2a)
table(test$sm2b)
table(test$sm2c)
library(tidymodels)
cv_folds <- vfold_cv(train, v = 10, strata = sm3)
check_constant_in_folds <- function(cv_folds, target_column) {
# Parcourir les folds et vérifier si target_column est constante dans train ou test
check_constant <- lapply(cv_folds$splits, function(split) {
# Partie TRAIN
train_data <- analysis(split)
train_classes <- unique(na.omit(train_data[[target_column]]))
unique_train <- length(train_classes)
# Partie TEST
test_data <- assessment(split)
test_classes <- unique(na.omit(test_data[[target_column]]))
unique_test <- length(test_classes)
list(
train_unique_classes = unique_train,
test_unique_classes = unique_test
)
})
# Vérifie quels folds ont un nombre de classes == 1 (constantes)
problematic_train <- which(sapply(check_constant, function(x) x$train_unique_classes) == 1)
problematic_test <- which(sapply(check_constant, function(x) x$test_unique_classes) == 1)
# Résumé
list(
problematic_train_folds = problematic_train,
problematic_test_folds = problematic_test,
detailed_check = check_constant
)
}
result <- check_constant_in_folds(cv_folds, "sm1")
print(result$problematic_train_folds)
print(result$problematic_test_folds)
result <- check_constant_in_folds(cv_folds, "sm2a")
print(result$problematic_train_folds)
print(result$problematic_test_folds)
result <- check_constant_in_folds(cv_folds, "sm2b")
print(result$problematic_train_folds)
print(result$problematic_test_folds)
result <- check_constant_in_folds(cv_folds, "sm2c")
print(result$problematic_train_folds)
print(result$problematic_test_folds)
result <- check_constant_in_folds(cv_folds, "sm3")
print(result$problematic_train_folds)
print(result$problematic_test_folds)
result <- check_constant_in_folds(cv_folds, "sm6")
print(result$problematic_train_folds)
print(result$problematic_test_folds)
# Liste des variables explicatives
predictor_columns <-setdiff(colnames(train), target_columns)
problematique_columns <- c("ad3_Rien", "ad3_Autre", "ad3_Tabac", "ad3_Codeine",
"ad3_Lean", "ad3_Morphine", "ad3_Flacka", "ad3_DMT", "ss6_Pharmacie","ndegobs","pond")
predictor_columns <- setdiff(predictor_columns,problematique_columns)
predictor_columns <- c(
# Socio-économique / Scolaire
"sexe", "niveau_scol", "age", "situation_fin", "absence_scol", "secu_scol", "violence_scol",
"ecole_love", "result5ts_s3ol",
# Santé / Perception de soi
"sante", "etat_corps", "accord_poids", "est_malade",
"maladie_trouble_langage", "maladie_handicap_intellectuel", "maladie_epilepsie",
"visite_medecin", "prof_sante",
# Alimentation et hygiène de vie
"alimentation_saine", "ptit_dej_semaine", "ptit_dej_weekend",
"manger_fruits", "manger_legumes", "mange_sucre", "mange_repas_rapide",
"jour_sport", "sport_extra",
# Ressenti / soutien social
"sm7", "cv1", "cv2a", "cv2b", "cv3", "cv5",
# Violences / Victimisations / Harcèlement
"vi1", "vi2_Personne_mon_age", "vi2_Membre_famille", "vi2_Quelquun_inconnu",
"vi3_Ecole", "vi3_Maison", "vi3_Quartier",
"vi4_Personne_violente", "vi4_Resultats_scolaires", "vi4_Colere",
"vi4_Corps_image", "vi4_Comportement", "vi4_Alcool_drogues",
# Addictions / consommation
"ad3_Cannabis", "ad3_Cocaine", "ad3_Alcool",
# Sexualité / situations à risque
"ss6_Dispensaire_CMS_ESPAS_CMP_CCF", "ss6_College_Lycee",
"ss7_Partenaire_ne_voulait_pas", "ss7_Alcool_fume",
# Ressenti / image de soi
"ss12_Choquant", "ss12_Accepte_d_en_faire", "ss12_Pas_aime",
"ss12_Reconnu_personnes", "ss12_Reconnu_moi_meme"
)
# Vérification
print(predictor_columns)
# Convertir les variables explicatives en numériques si nécessaire
train[, (predictor_columns) := lapply(.SD, as.factor), .SDcols = predictor_columns]
test[, (predictor_columns) := lapply(.SD, as.factor), .SDcols = predictor_columns]
